   /*******************************************************/
   /*      "C" Language Integrated Production System      */
   /*                                                     */
   /*               CLIPS Version 6.24  06/05/06          */
   /*                                                     */
   /*                                                     */
   /*******************************************************/

/*************************************************************/
/* Purpose:                                                  */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Brian L. Dantes                                      */
/*                                                           */
/* Contributing Programmer(s):                               */
/*                                                           */
/* Revision History:                                         */
/*      6.23: Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*      6.24: Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*************************************************************/

#ifndef _H_classcom
#define _H_classcom

#define CONVENIENCE_MODE  0
#define CONSERVATION_MODE 1

#define EnvGetDefclassName(theEnv,execStatus,x) GetConstructNameString((struct constructHeader *) x)
#define EnvGetDefclassPPForm(theEnv,execStatus,x) GetConstructPPForm(theEnv,execStatus,(struct constructHeader *) x)

#define GetDefclassNamePointer(x) GetConstructNamePointer((struct constructHeader *) x)
#define GetDefclassModule(x) GetConstructModuleItem((struct constructHeader *) x)

#define SetNextDefclass(c,t) SetNextConstruct((struct constructHeader *) c, \
                                              (struct constructHeader *) t)

#define SetDefclassPPForm(c,ppf) SetConstructPPForm(theEnv,execStatus,(struct constructHeader *) c,ppf)

#define EnvDefclassModule(theEnv,execStatus,x) GetConstructModuleName((struct constructHeader *) x)

#ifndef _H_cstrccom
#include "cstrccom.h"
#endif
#ifndef _H_moduldef
#include "moduldef.h"
#endif
#ifndef _H_object
#include "object.h"
#endif
#ifndef _H_symbol
#include "symbol.h"
#endif

#ifdef LOCALE
#undef LOCALE
#endif

#ifdef _CLASSCOM_SOURCE_
#define LOCALE
#else
#define LOCALE extern
#endif

#define DefclassModule(x) GetConstructModuleName((struct constructHeader *) x)
#define FindDefclass(a) EnvFindDefclass(GetCurrentEnvironment(),a)
#define GetDefclassList(a,b) EnvGetDefclassList(GetCurrentEnvironment(),a,b)
#define GetDefclassName(x) GetConstructNameString((struct constructHeader *) x)
#define GetDefclassPPForm(x) GetConstructPPForm(GetCurrentEnvironment(),(struct constructHeader *) x)
#define GetDefclassWatchInstances(a) EnvGetDefclassWatchInstances(GetCurrentEnvironment(),a)
#define GetDefclassWatchSlots(a) EnvGetDefclassWatchSlots(GetCurrentEnvironment(),a)
#define GetNextDefclass(a) EnvGetNextDefclass(GetCurrentEnvironment(),a)
#define IsDefclassDeletable(a) EnvIsDefclassDeletable(GetCurrentEnvironment(),a)
#define ListDefclasses(a,b) EnvListDefclasses(GetCurrentEnvironment(),a,b)
#define SetDefclassWatchInstances(a,b) EnvSetDefclassWatchInstances(GetCurrentEnvironment(),a,b)
#define SetDefclassWatchSlots(a,b) EnvSetDefclassWatchSlots(GetCurrentEnvironment(),a,b)
#define Undefclass(a) EnvUndefclass(GetCurrentEnvironment(),a)
#define SetClassDefaultsMode(a) EnvSetClassDefaultsMode(GetCurrentEnvironment(),a)
#define GetClassDefaultsMode() EnvGetClassDefaultsMode(GetCurrentEnvironment())

LOCALE void *EnvFindDefclass(void *,EXEC_STATUS,char *);
LOCALE DEFCLASS *LookupDefclassByMdlOrScope(void *,EXEC_STATUS,char *);
LOCALE DEFCLASS *LookupDefclassInScope(void *,EXEC_STATUS,char *);
LOCALE DEFCLASS *LookupDefclassAnywhere(void *,EXEC_STATUS,struct defmodule *,char *);
LOCALE intBool DefclassInScope(void *,EXEC_STATUS,DEFCLASS *,struct defmodule *);
LOCALE void *EnvGetNextDefclass(void *,EXEC_STATUS,void *);
LOCALE intBool EnvIsDefclassDeletable(void *,EXEC_STATUS,void *);

LOCALE void UndefclassCommand(void *,EXEC_STATUS);
LOCALE unsigned short EnvSetClassDefaultsMode(void *,EXEC_STATUS,unsigned short);
LOCALE unsigned short EnvGetClassDefaultsMode(void *,EXEC_STATUS);
LOCALE void *GetClassDefaultsModeCommand(void *,EXEC_STATUS);
LOCALE void *SetClassDefaultsModeCommand(void *,EXEC_STATUS);

#if DEBUGGING_FUNCTIONS
LOCALE void PPDefclassCommand(void *,EXEC_STATUS);
LOCALE void ListDefclassesCommand(void *,EXEC_STATUS);
LOCALE void EnvListDefclasses(void *,EXEC_STATUS,char *,struct defmodule *);
LOCALE unsigned EnvGetDefclassWatchInstances(void *,EXEC_STATUS,void *);
LOCALE void EnvSetDefclassWatchInstances(void *,EXEC_STATUS,unsigned,void *);
LOCALE unsigned EnvGetDefclassWatchSlots(void *,EXEC_STATUS,void *);
LOCALE void EnvSetDefclassWatchSlots(void *,EXEC_STATUS,unsigned,void *);
LOCALE unsigned DefclassWatchAccess(void *,EXEC_STATUS,int,unsigned,EXPRESSION *);
LOCALE unsigned DefclassWatchPrint(void *,EXEC_STATUS,char *,int,EXPRESSION *);
#endif

LOCALE void GetDefclassListFunction(void *,EXEC_STATUS,DATA_OBJECT *);
LOCALE void EnvGetDefclassList(void *,EXEC_STATUS,DATA_OBJECT *,struct defmodule *);
LOCALE intBool EnvUndefclass(void *,EXEC_STATUS,void *);
LOCALE intBool HasSuperclass(DEFCLASS *,DEFCLASS *);

LOCALE SYMBOL_HN *CheckClassAndSlot(void *,EXEC_STATUS,char *,DEFCLASS **);

#if (! BLOAD_ONLY) && (! RUN_TIME)
LOCALE void SaveDefclasses(void *,EXEC_STATUS,void *,char *);
#endif

#endif




